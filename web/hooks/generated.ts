/* eslint-disable */
// DO NOT EDIT THIS FILE
// Generated by @graphql-codegen/cli using:
// (npm|yarn|pnpm) run generate
import { useQuery, UseQueryOptions } from 'react-query'
import { fetcher } from '@services/data'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
// Generated on 03.07.2022 23:36

/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

/** An item */
export type Item = {
  __typename?: 'Item'
  id?: Maybe<Scalars['ID']>
  name?: Maybe<Scalars['String']>
}

export type RootQueryType = {
  __typename?: 'RootQueryType'
  /** Test Query */
  item?: Maybe<Item>
}

export type RootQueryTypeItemArgs = {
  id: Scalars['ID']
}

export type TestQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type TestQuery = {
  __typename?: 'RootQueryType'
  item?: { __typename?: 'Item'; name?: string | null } | null
}

export const TestDocument = `
    query Test($id: ID!) {
  item(id: $id) {
    name
  }
}
    `
export const useTestQuery = <TData = TestQuery, TError = unknown>(
  variables: TestQueryVariables,
  options?: UseQueryOptions<TestQuery, TError, TData>
) =>
  useQuery<TestQuery, TError, TData>(
    ['Test', variables],
    fetcher<TestQuery, TestQueryVariables>(TestDocument, variables),
    options
  )
